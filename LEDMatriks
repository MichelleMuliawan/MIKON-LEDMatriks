unsigned long milisbefore;
const int row[8] = {10, 15, 9, 13, 2, 8, 3, 6};
const int col[8] = {14, 4, 5, 11, 7, 12, 16, 17};

byte MATI[] = {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111};
byte A[] = {B11100111,B11000011,B10011001,B10011001,B10000001,B10000001,B10011001,B10011001};
byte B[] = {B11000001,B10011001,B10011001,B10000001,B11000001,B10011001,B10011001,B11000001};
byte C[] = {B10000011,B10000001,B11111001,B11111001,B11111001,B11111001,B10000001,B10000011};
byte D[] = {B11100001,B11000001,B10011001,B10011001,B10011001,B10011001,B11000001,B11100001};
byte E[] = {B10000001,B10000001,B11111001,B10000001,B10000001,B11111001,B10000001,B10000001};
byte F[] = {B10000001,B10000001,B11111001,B11000001,B11000001,B11111001,B11111001,B11111001};
byte G[] = {B11100011,B11000001,B11011001,B11111001,B10001001,B11011001,B11000001,B11100011};
byte H[] = {B10011001,B10011001,B10011001,B10000001,B10000001,B10011001,B10011001,B10011001};
byte I[] = {B10000001,B10000001,B11100111,B11100111,B11100111,B11100111,B10000001,B10000001};
byte J[] = {B10000001,B10000001,B11100111,B11100111,B11100111,B11100111,B11100001,B11110001};
byte K[] = {B10011001,B11001001,B11100001,B11110001,B11110001,B11100001,B11001001,B10011001};
byte L[] = {B11111001,B11111001,B11111001,B11111001,B11111001,B11111001,B10000001,B10000001};
byte M[] = {B10111101,B10011001,B10000001,B10100101,B10111101,B10111101,B10111101,B10111101};
byte N[] = {B10011001,B10011001,B10011001,B10010001,B10000001,B10001001,B10011001,B10011001};
byte O[] = {B11000011,B10000001,B10011001,B10011001,B10011001,B10011001,B10000001,B11000011};
byte P[] = {B11100001,B11000001,B10011001,B10011001,B11000001,B11100001,B11111001,B11111001};
byte Q[] = {B11000011,B10000001,B10011001,B10111001,B10101001,B10011001,B10000001,B01000011};
byte R[] = {B11000001,B10000001,B10011001,B11001001,B11100001,B11100001,B11001001,B10011001};
byte S[] = {B11000011,B10000001,B11111001,B11000001,B10000001,B10011111,B11000011,B11000001};
byte T[] = {B10000001,B10000001,B11100111,B11100111,B11100111,B11100111,B11100111,B11100111};
byte U[] = {B10011001,B10011001,B10011001,B10011001,B10011001,B10011001,B10000001,B11000011};
byte V[] = {B10011001,B10011001,B10011001,B10011001,B10011001,B10011001,B11000011,B11100111};
byte W[] = {B10111101,B10111101,B10111101,B10111101,B10111101,B10100101,B10100101,B11011011};
byte X[] = {B10011001,B10011001,B10011001,B11000011,B11100111,B11000011,B10011001,B10011001};
byte Y[] = {B10011001,B10011001,B10011001,B10000001,B11000011,B11100111,B11100111,B11100111};
byte Z[] = {B10000001,B10000001,B11001111,B11100111,B11110011,B11111001,B10000001,B10000001};
byte NOL[] = {B11000011,B10000001,B10011001,B10011001,B10011001,B10011001,B10000001,B11000011}; 
byte SATU[]  = {B11000111,B11000011,B11000001,B11001111,B11001111,B11001111,B11001111,B11001111}; 
byte DUA[]  = {B11000011,B10000001,B10011101,B11001111,B11100111,B11110011,B10000001,B10000001};
byte TIGA[]= {B11000011,B10000001,B10011111,B11001111,B11001111,B10011111,B10000001,B11000011};
byte EMPAT[] = {B11001111,B11000111,B11000011,B11001001,B10000001,B10000001,B11001111,B11001111};
byte LIMA[] = {B10000001,B10000001,B11111001,B11000001,B10000011,B10011111,B10000001,B11000001};
byte ENAM[]  = {B11001111,B11100111,B11110011,B11000001,B10000001,B10011101,B10011101,B11000011};
byte TUJUH[]= {B10000001,B10000001,B10011111,B10011111,B11001111,B11100111,B11110011,B11111001}; 
byte DELAPAN[]= {B11000011,B10011001,B10011001,B11000011,B10000001,B10011001,B10011001,B11000011}; 
byte SEMBILAN[] = {B11000011,B10000001,B10011001,B10011001,B10000011,B11001111,B11100111,B11110011};

void setup() {
  Serial.begin(9600);
  milisbefore = 0;
  for (byte pin=0; pin<8; pin++){
    pinMode(col[pin], OUTPUT);
    pinMode(row[pin], OUTPUT);
  }
}
void tampilan(byte b[]){
  while (millis()-milisbefore<=2000){
    for(byte i=0; i<8; i++){
      setcol(b[i]);
      digitalWrite(row[i],LOW);
      delay(2);
      digitalWrite(row[i],HIGH);
    }
  }
  milisbefore=millis();
}
void setcol(byte b){
  digitalWrite(col[0], (~b>>0) & 0x01);
  digitalWrite(col[1], (~b>>1) & 0x01);
  digitalWrite(col[2], (~b>>2) & 0x01);
  digitalWrite(col[3], (~b>>3) & 0x01);
  digitalWrite(col[4], (~b>>4) & 0x01);
  digitalWrite(col[5], (~b>>5) & 0x01);
  digitalWrite(col[6], (~b>>6) & 0x01);
  digitalWrite(col[7], (~b>>7) & 0x01);
}
void loop() {
  tampilan(MATI);
  tampilan(A);
  tampilan(B);
  tampilan(C);
  tampilan(D);
  tampilan(E);
  tampilan(F);
  tampilan(G);
  tampilan(H);
  tampilan(I);
  tampilan(J);
  tampilan(K);
  tampilan(L);
  tampilan(M);
  tampilan(N);
  tampilan(O);
  tampilan(P);
  tampilan(Q);
  tampilan(R);
  tampilan(S);
  tampilan(T);
  tampilan(U);
  tampilan(V);
  tampilan(W);
  tampilan(X);
  tampilan(Y);
  tampilan(Z);
  tampilan(NOL);
  tampilan(SATU);
  tampilan(DUA);
  tampilan(TIGA);
  tampilan(EMPAT);
  tampilan(LIMA);
  tampilan(ENAM);
  tampilan(TUJUH);
  tampilan(DELAPAN);
  tampilan(SEMBILAN);
}

